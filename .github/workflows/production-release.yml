name: Production Release

on:
  push:
    tags:
      - 'v*.*.*'  # Run when version tags are pushed
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-package:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for git tags and commits
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build extension
        run: npm run build
      
      - name: Obfuscate code
        run: npm run obfuscate
      
      - name: Package extension
        run: node scripts/package.js
      
      - name: Get package name
        id: get-package
        run: |
          $packageName = Get-ChildItem -Path packages -Filter "form-master-pro-v*.zip" | Sort-Object -Property LastWriteTime -Descending | Select-Object -First 1 -ExpandProperty FullName
          echo "package=$packageName" >> $env:GITHUB_OUTPUT
          echo "filename=$(Split-Path -Leaf $packageName)" >> $env:GITHUB_OUTPUT
        shell: pwsh
        
      - name: Build CRX package
        id: crx-package
        run: |
          npm run build:crx
          $crxFile = Get-ChildItem -Path packages -Filter "form-master-pro-v*.crx" | Sort-Object -Property LastWriteTime -Descending | Select-Object -First 1 -ExpandProperty FullName
          echo "crx=$crxFile" >> $env:GITHUB_OUTPUT
          echo "crxname=$(Split-Path -Leaf $crxFile)" >> $env:GITHUB_OUTPUT
        shell: pwsh
      
      # Use GitHub CLI to create a release in the target repository
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GH_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          PACKAGE_PATH: ${{ steps.get-package.outputs.package }}
          CRX_PATH: ${{ steps.crx-package.outputs.crx }}
          PACKAGE_NAME: ${{ steps.get-package.outputs.filename }}
          CRX_NAME: ${{ steps.crx-package.outputs.crxname }}
          TAG_NAME: ${{ github.ref_name }}
        run: |
          # Install GitHub CLI
          choco install gh -y
          
          # Create release in target repository
          gh release create $env:TAG_NAME `
            --repo "haroldmei/formmasterpro" `
            --title "FormMasterPro $env:TAG_NAME" `
            --notes "Release of FormMasterPro $env:TAG_NAME" `
            $env:PACKAGE_PATH `
            $env:CRX_PATH
          
          echo "Release created in: https://github.com/haroldmei/formmasterpro"
          echo "Package uploaded: $env:PACKAGE_NAME"
          echo "CRX uploaded: $env:CRX_NAME"
        shell: pwsh
      
      - name: Package summary
        run: |
          echo "Package created: ${{ steps.get-package.outputs.filename }}"
          echo "CRX package created: ${{ steps.crx-package.outputs.crxname }}"
          echo "Release created in: https://github.com/haroldmei/formmasterpro"
          echo "View releases at: https://github.com/haroldmei/formmasterpro/releases"
